plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.news.app"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "NEWS_API_KEY", "\"${getProperty("local.properties", "NEWS_API_KEY")}\""
        buildConfigField "String", "BASE_URL", '"https://newsapi.org/v2/"'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    androidExtensions {
        experimental = true
    }

    dataBinding {
        enabled true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    // Test dependencies
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.3.0"
    androidTestImplementation "androidx.test:rules:1.3.0"
    androidTestImplementation "androidx.test:runner:1.3.0"
    testImplementation "org.mockito:mockito-core:2.23.0"
    testImplementation "org.mockito:mockito-inline:2.8.47"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "org.assertj:assertj-core:3.2.0"
    testImplementation "android.arch.persistence.room:testing:1.1.1"
    testImplementation "android.arch.core:core-testing:1.1.1"
    testImplementation "org.robolectric:robolectric:4.2.1"


    // ViewModel
    def vLifecycle = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$vLifecycle"
    implementation "androidx.lifecycle:lifecycle-extensions:$vLifecycle"

    //Rx Java
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.16'

    // Dagger 2
    def vDagger = '2.24'
    implementation "com.google.dagger:dagger:$vDagger"
    implementation "com.google.dagger:dagger-android-support:$vDagger"
    kapt "com.google.dagger:dagger-compiler:$vDagger"
    kapt "com.google.dagger:dagger-android-processor:$vDagger"

    // Retrofit
    def vRetrofit = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$vRetrofit"
    implementation "com.squareup.retrofit2:converter-gson:$vRetrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$vRetrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.1"

    // Room components
    def vRoom = '2.2.6'
    implementation "androidx.room:room-runtime:$vRoom"
    implementation "androidx.room:room-ktx:$vRoom"
    kapt "androidx.room:room-compiler:$vRoom"
    androidTestImplementation "androidx.room:room-testing:$vRoom"

    // Gson
    def vGson = '2.8.6'
    implementation "com.google.code.gson:gson:2.8.6"

    // Stetho
    def vStetho = '1.5.1'
    implementation "com.facebook.stetho:stetho:$vStetho"
    implementation "com.facebook.stetho:stetho-okhttp3:$vStetho"

    // Material Desing
    def vMaterial = '1.0.0'
    implementation "com.google.android.material:material:$vMaterial"

    // Image Loading and Caching
    def vGlide_version = "4.11.0"
    implementation "com.github.bumptech.glide:glide:$vGlide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$vGlide_version"

    kapt "com.android.databinding:compiler:3.1.4"
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}